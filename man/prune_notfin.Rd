% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prune_01-B_notfin.R
\name{prune_notfin}
\alias{prune_notfin}
\title{Prune \code{NA}, \code{NaN} and \code{Inf}}
\usage{
prune_notfin(
  df,
  var,
  prune_var = "prune_id",
  id = "notfin",
  is_na = TRUE,
  is_inf = TRUE
)
}
\arguments{
\item{df}{dataframe}

\item{var}{String, name of the numeric column to prune}

\item{prune_var}{String, name of the column with the prune id}

\item{id}{String, identification of the pruning in \code{prune_var}}

\item{is_na}{TRUE: flag \code{NA} and \code{NaN}. default is \code{TRUE}}

\item{is_inf}{TRUE: flag \code{Inf} and \code{-Inf}. default is \code{TRUE}}
}
\value{
dataframe with updated \code{prune_var}  column
}
\description{
Prune \code{NA}, \code{NaN} and \code{Inf},
}
\details{
Prune \code{NA}, \code{NaN} and \code{Inf}. You can select which one by
using the flags \code{is_na} and \code{is_fin}, \code{is_na} will prune
the \code{NA} and \code{NaN} values. \code{is_fin} will prune \code{Inf}
and \code{-Inf}.

\emph{Important}: This funciton, contrary to the other prune_X() functions
will not into account the existing id in \code{prune_var}.  It will override
everything.
}
\examples{
df <- data.frame(
 alpha = 1:5,
 beta = c(1, NA_real_, NaN, -Inf, Inf),
 prune_id = factor(NA_character_))
df <- prune_notfin(df, var = "beta", prune_var = "prune_id", id = "notfin")
# this should give 4 pruning id
stopifnot(sum(!is.na(df$prune_id)) == 4)
}
